//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculadoraClient.Calculadora {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ficha_4_calculadora.pt/", ConfigurationName="Calculadora.CalculadoraSoap")]
    public interface CalculadoraSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Adicao", ReplyAction="*")]
        int Adicao(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Adicao", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AdicaoAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Subtracao", ReplyAction="*")]
        int Subtracao(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Subtracao", ReplyAction="*")]
        System.Threading.Tasks.Task<int> SubtracaoAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Multiplicacao", ReplyAction="*")]
        int Multiplicacao(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Multiplicacao", ReplyAction="*")]
        System.Threading.Tasks.Task<int> MultiplicacaoAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Divisao", ReplyAction="*")]
        float Divisao(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Divisao", ReplyAction="*")]
        System.Threading.Tasks.Task<float> DivisaoAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Factorial", ReplyAction="*")]
        int Factorial(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Factorial", ReplyAction="*")]
        System.Threading.Tasks.Task<int> FactorialAsync(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Potencia", ReplyAction="*")]
        double Potencia(double num, double exp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/Potencia", ReplyAction="*")]
        System.Threading.Tasks.Task<double> PotenciaAsync(double num, double exp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/ValorAbsoluto", ReplyAction="*")]
        double ValorAbsoluto(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ficha_4_calculadora.pt/ValorAbsoluto", ReplyAction="*")]
        System.Threading.Tasks.Task<double> ValorAbsolutoAsync(int a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CalculadoraSoapChannel : CalculadoraClient.Calculadora.CalculadoraSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculadoraSoapClient : System.ServiceModel.ClientBase<CalculadoraClient.Calculadora.CalculadoraSoap>, CalculadoraClient.Calculadora.CalculadoraSoap {
        
        public CalculadoraSoapClient() {
        }
        
        public CalculadoraSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculadoraSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Adicao(int a, int b) {
            return base.Channel.Adicao(a, b);
        }
        
        public System.Threading.Tasks.Task<int> AdicaoAsync(int a, int b) {
            return base.Channel.AdicaoAsync(a, b);
        }
        
        public int Subtracao(int a, int b) {
            return base.Channel.Subtracao(a, b);
        }
        
        public System.Threading.Tasks.Task<int> SubtracaoAsync(int a, int b) {
            return base.Channel.SubtracaoAsync(a, b);
        }
        
        public int Multiplicacao(int a, int b) {
            return base.Channel.Multiplicacao(a, b);
        }
        
        public System.Threading.Tasks.Task<int> MultiplicacaoAsync(int a, int b) {
            return base.Channel.MultiplicacaoAsync(a, b);
        }
        
        public float Divisao(int a, int b) {
            return base.Channel.Divisao(a, b);
        }
        
        public System.Threading.Tasks.Task<float> DivisaoAsync(int a, int b) {
            return base.Channel.DivisaoAsync(a, b);
        }
        
        public int Factorial(int a) {
            return base.Channel.Factorial(a);
        }
        
        public System.Threading.Tasks.Task<int> FactorialAsync(int a) {
            return base.Channel.FactorialAsync(a);
        }
        
        public double Potencia(double num, double exp) {
            return base.Channel.Potencia(num, exp);
        }
        
        public System.Threading.Tasks.Task<double> PotenciaAsync(double num, double exp) {
            return base.Channel.PotenciaAsync(num, exp);
        }
        
        public double ValorAbsoluto(int a) {
            return base.Channel.ValorAbsoluto(a);
        }
        
        public System.Threading.Tasks.Task<double> ValorAbsolutoAsync(int a) {
            return base.Channel.ValorAbsolutoAsync(a);
        }
    }
}
